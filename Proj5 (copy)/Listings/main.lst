C51 COMPILER V9.60.0.0   MAIN                                                              03/15/2021 20:29:28 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.exe main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <REG517A.H>
   2          
   3          #define FR_CLOCK 12000000
   4          #define BOUDRATE 1200
   5          #define AUX (12000000/(12*1200))
   6          #define TH1_INICIAL (-(AUX*2/32)+256) //equivalente a 204
   7          
   8          #define BUFFER_SIZE 16
   9          
  10          typedef struct{
  11            char buffer[BUFFER_SIZE];
  12            unsigned char in_index;
  13            unsigned char out_index;
  14          }circularBuffer;
  15          
  16          circularBuffer RxBuffer;
  17          circularBuffer TxBuffer;
  18          
  19          bit RecebeuString = 0;
  20          bit is_TI_busy = 0;
  21          
  22          bit new_byte_arrived = 0; //variavel auxiliar para comunicação da interrupção com a main()
  23          
  24          
  25          char RxBufferVazio(){
  26   1        return RxBuffer.in_index == RxBuffer.out_index;
  27   1      }
  28          
  29          char TxBufferVazio(){
  30   1        return TxBuffer.in_index == TxBuffer.out_index;
  31   1      }
  32          
  33          char ReceiveChar(){
  34   1        char atual = RxBuffer.buffer[RxBuffer.out_index];
  35   1        RxBuffer.out_index = (RxBuffer.out_index + 1) % BUFFER_SIZE;
  36   1        return atual;
  37   1      }
  38          
  39          void PushChar2RxBuffer(char c){
  40   1        RxBuffer.buffer[RxBuffer.in_index] = c;
  41   1        RxBuffer.in_index = (RxBuffer.in_index + 1) % BUFFER_SIZE;
  42   1      }
  43          
  44          void ReceiveString(char *s){
  45   1        int i = 0;
  46   1        while(!RxBufferVazio()){
  47   2            s[i] = ReceiveChar();
  48   2            i++;
  49   2        }
  50   1      }
  51          
  52          void SendChar(char c){
  53   1        TxBuffer.buffer[TxBuffer.in_index] = c;
  54   1        TxBuffer.in_index = (TxBuffer.in_index + 1) % BUFFER_SIZE;
C51 COMPILER V9.60.0.0   MAIN                                                              03/15/2021 20:29:28 PAGE 2   

  55   1      }
  56          
  57          char PopCharFromTxBuffer(){
  58   1        char aux = TxBuffer.buffer[TxBuffer.out_index];
  59   1        TxBuffer.out_index = (TxBuffer.out_index + 1) % BUFFER_SIZE;
  60   1        return aux;
  61   1      }
  62          
  63          void SendString(char *s){
  64   1        int i = -1;
  65   1        do{
  66   2            SendChar(s[++i]);
  67   2        }while(s[i] != '$');
  68   1      }
  69          
  70          
  71          void serial_int() interrupt 4
  72          {
  73   1        if(TI0){
  74   2          is_TI_busy = 0;
  75   2          TI0=0; //preciso zerar o TI pois isso não seria feito automaticamente, isso é necessario para evitar que
             - a interrupção seja chamada indevidamente
  76   2        }
  77   1        if(RI0){
  78   2          new_byte_arrived = 1; 
  79   2          RI0 = 0; //preciso zerar o RI pois isso não seria feito automaticamente, isso é necessario para evitar q
             -ue a interrupção seja chamada indevidamente
  80   2        }
  81   1      }
  82          
  83          void inicializa_serial(){
  84   1        S0CON = (S0CON & 0x0F)| 0x50; //setando o SM0|SM1|SM2|REN para 0101, para a serial operar no modo 1.
  85   1        PCON |= 0x80; //setando o smod para 1 para conseguir um boudrate mais proximo de 1200bps
  86   1        ADCON0 = 0x80 | ADCON0;
  87   1      
  88   1      }
  89          
  90          void inicializa_Rx_Tx(){
  91   1        RxBuffer.in_index = 0;
  92   1        RxBuffer.out_index = 0;
  93   1        TxBuffer.in_index = 0;
  94   1        TxBuffer.out_index = 0;
  95   1      }
  96          
  97          void main(void){
  98   1        
  99   1      
 100   1        inicializa_Rx_Tx();
 101   1        inicializa_serial(); //configurando o serial para o modo 1
 102   1        EAL = 1; // Habilita o tratamento de interrupções
 103   1        ES0 = 1; // Habilita o tratamento da interrupção do serial quando TI e/ou RI é 1 
 104   1        while(1){
 105   2          if(new_byte_arrived){
 106   3            PushChar2RxBuffer(S0BUF);
 107   3            if(S0BUF == '$'){
 108   4              RecebeuString = 1;
 109   4            }
 110   3            new_byte_arrived = 0;
 111   3          }
 112   2          if(RecebeuString){
 113   3            char aux[BUFFER_SIZE];
 114   3            ReceiveString(aux);
C51 COMPILER V9.60.0.0   MAIN                                                              03/15/2021 20:29:28 PAGE 3   

 115   3            SendString(aux);
 116   3            TI0 = 1;
 117   3            RecebeuString = 0;
 118   3          }
 119   2          if(!is_TI_busy){
 120   3            if(!TxBufferVazio()){
 121   4              S0BUF = PopCharFromTxBuffer();
 122   4            }
 123   3            is_TI_busy = 1;
 124   3          }
 125   2          
 126   2          
 127   2        }
 128   1      }
 129          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    281    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     36      22
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
